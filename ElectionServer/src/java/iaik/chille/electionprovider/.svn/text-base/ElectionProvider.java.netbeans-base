/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package iaik.chille.electionprovider;

import iaik.chille.electionprovider.jpa.DBChoiceJpaController;
import iaik.chille.electionprovider.jpa.DBElectionJpaController;
import iaik.chille.elections.common.Choice;
import iaik.chille.elections.common.Election;
import iaik.chille.elections.common.Elections;
import iaik.chille.elections.db.DBChoice;
import iaik.chille.elections.db.DBElection;
import java.io.File;
import java.io.FileInputStream;
import java.io.StringWriter;
import java.util.*;
//import javax.jdo.Transaction;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
 // org.datanucleus.enhancer.tools.EnhancerTask


/**
 *
 * @author chille
 */
@WebService(serviceName = "ElectionProvider")
public class ElectionProvider {

  /**
   * This is a sample web service operation
   */
  @WebMethod(operationName = "hello")
  public String hello(@WebParam(name = "name") String txt) {
    return "Hello " + txt + " !";
  }

  /**
   *
   */
  @WebMethod(operationName = "getVersion")
  public String getVersion()
  {
    return "1.0.1 alpha";
  }
 
  private void insertElectionInformation(Election el) throws Exception
  {
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("ElectionServerPU2"); 
    DBChoiceJpaController cc = new DBChoiceJpaController(emf);
    DBElectionJpaController ec = new DBElectionJpaController(emf);
    DBElection el2 = new DBElection(el);
    List <DBChoice>cl2 = el2.getChoice();
    for(int i=0;i<cl2.size();i++)
    {
      cc.create(cl2.get(i));
    }
    ec.create(el2);
  }
  

  /**
   * Web service operation
   */
  @WebMethod(operationName = "getElectionInformation")
  public String getElectionInformation()
  {
    try
    {
      iaik.chille.elections.common.ObjectFactory of = new iaik.chille.elections.common.ObjectFactory();
      Elections els = of.createElections();
      // ...
      {
        Election el = of.createElection();
        el.setId(UUID.randomUUID().toString());
        el.setQuestion("blubb");
        el.setTitle("asdf");
        el.setUrl("");
        try{
          GregorianCalendar cal = new GregorianCalendar( 1976, Calendar.DECEMBER, 22 );
          XMLGregorianCalendar xmlCal = DatatypeFactory.newInstance().newXMLGregorianCalendar( cal );
          el.setValidFrom(xmlCal);
          el.setValidTo(xmlCal);
        }
        catch(DatatypeConfigurationException ex)
        {
          ex.printStackTrace();
          return ex.toString();
        }
        // ..
        {
          Choice choise1 = of.createChoice();
          choise1.setAnswer("answer");
          choise1.setDetail("detail");
          choise1.setResult(3);
          choise1.setUrl("asdf");
          choise1.setId(UUID.randomUUID().toString());
          el.getChoice().add(choise1);
        }
        insertElectionInformation(el);
        els.getElection().add(el);
      }

      try
      {
        JAXBContext ctx = JAXBContext.newInstance(els.getClass().getPackage().getName());
        Marshaller ms = ctx.createMarshaller();
        ms.setProperty(Marshaller.JAXB_ENCODING, "UTF-8");
        ms.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        StringWriter sw = new StringWriter();
        ms.marshal(els, sw);
        return sw.toString();
      }
      catch(JAXBException ex)
      {
        ex.printStackTrace();
        return ex.toString();
      }
    }
    catch(Exception ex)
    {
      ex.printStackTrace();
      return ex.toString();
    }
  
  }

  /**
   * Web service operation
   */
  @WebMethod(operationName = "getVotingServers")
  public String getVotingServers() {
    return "asdf";
  }
}
